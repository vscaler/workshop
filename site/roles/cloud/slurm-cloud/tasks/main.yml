---
# tasks file for slurm-cloud

- set_fact:
    dns_key: '{{ slurm_conf_path }}/Kscheduler-update-key.key'

- name: Install slurm-cloud packages
  yum:
    name: '{{ slurm_cloud_packages }}'
    state: present
  tags: install-only

- name: Copy slurm power management scripts
  copy:
    src: '{{ item }}'
    dest: '/usr/local/bin/{{ item }}'
    mode: '0700'
    owner: slurm
    group: slurm
  with_items:
    - 'slurm-power.py'
    - 'slurm-power-on'
    - 'slurm-power-off'

- name: Render slurm cloud config files
  template:
    src: '{{ item.0 }}'
    dest: '{{ slurm_conf_path }}/{{ item.0 }}'
    mode: '{{ item.1 }}'
    owner: slurm
    group: slurm
    backup: yes
  with_together:
    - ['cloudconfig.ini', 'slurm-power.ini', 'slurm-cloud.conf']
    - ['0400', '0400', '0644']
  notify: restart slurm

- name: Include slurm-cloud.conf in slurm.conf
  lineinfile:
    path: '/etc/slurm/slurm.conf'
    line: 'Include /etc/slurm/slurm-cloud.conf'
  notify: restart slurm

- block:
  - name: Copy data stage-out script
    copy:
      src: 'stage-out'
      dest: '/usr/local/bin/stage-out'
      mode: '0755'
      owner: root
      group: root

  - name: Render staged jobs submission and stage-in scripts
    template:
      src: '{{ item }}'
      dest: '/usr/local/bin/{{ item }}'
      mode: '0755'
      owner: root
      group: root
    with_items:
      - submit-staged
      - stage-in

  - name: Render slurm prolog/epilog scripts
    template:
      src: '{{ item }}'
      dest: '{{ slurm_conf_path }}/{{ item }}'
      mode: '0700'
      owner: slurm
      group: slurm
      backup: yes
    with_items:
      - 'PrologSlurmctld'
      - 'EpilogSlurmctld'
    notify: restart slurm

  - name: Add 'data' QoS to slurm
    shell: 'sacctmgr -i add qos name=data GrpJobs=2 | grep -i adding'
    register: sacctmgr_success
    changed_when: '"Adding QOS" in sacctmgr_success.stdout'
    failed_when: false

  when: aws.bursting

- name: Create dns update key
  shell: 'cd {{slurm_conf_path}}; dnssec-keygen -r /dev/random -a HMAC-SHA512 -b 512 -n HOST scheduler-update-key'
  args:
    creates: '{{ dns_key }}'

- name: Rename dns update key
  shell: 'mv {{slurm_conf_path}}/Kscheduler-update-key{*,}.key; mv {{slurm_conf_path}}/Kscheduler-update-key{*,}.private'
  args:
    creates: '{{ dns_key }}'

- name: Set dns update key permissions
  file:
    name: '{{ slurm_conf_path }}/Kscheduler-update-key.{{ item }}'
    state: file
    owner: slurm
    group: slurm
    mode: 0400
  with_items:
    - key
    - private

- name: get dnsupdate key
  shell: "cat {{slurm_conf_path}}/Kscheduler-update-key.private | grep Key: | awk '{ print $2 }'"
  changed_when: false
  register: dnsupdate_key

- name: prepare dns facts
  set_fact:
    dns_reverse_ptr: '{{ aws.sharedfs_ip.split(".")[::-1][2:]|join(".") }}'
    dns_ctrl_ptr: '{{ aws.ctrl_ip.split(".")[::-1][:2]|join(".") }}'

- name: Render named.cloud.zones
  template:
    src: 'named.cloud.zones'
    dest: '{{ trix_local }}/etc/named.cloud.zones'
    setype: named_conf_t
    seuser: system_u
  notify: restart named

- name: Render dns zone files
  template:
    src: '{{ item.0 }}'
    dest: '{{ trix_local }}/var/lib/named/{{ item.1 }}'
    mode: 0644
    owner: named
    group: named
    setype: named_zone_t
    seuser: system_u
  with_together:
    - ['dns_forward_zone', 'dns_reverse_zone']
    - ['{{ aws.domain }}.zone', '{{ dns_reverse_ptr }}.in-addr.arpa.zone']
  notify: restart named

- name: Include cloud's DNS zone file in named conf
  lineinfile:
    path: '/etc/named.conf'
    line: 'include "{{ trix_local }}/etc/named.cloud.zones";'
  notify: restart named
